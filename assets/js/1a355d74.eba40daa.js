"use strict";(self.webpackChunkmy_personal_website=self.webpackChunkmy_personal_website||[]).push([[427],{1883:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"coreboot/build","title":"Build Coreboot","description":"Now we will walk through building Coreboot from scratch. We will first install the required tools, then download Coreboot\u2019s source code, build its toolchain, configure it for your mainboard, and finally compile it into a ROM file you can flash.","source":"@site/docs/coreboot/build.md","sourceDirName":"coreboot","slug":"/coreboot/build/","permalink":"/docs/coreboot/build/","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"coreboot","permalink":"/docs/tags/coreboot"},{"inline":true,"label":"build","permalink":"/docs/tags/build"},{"inline":true,"label":"bios","permalink":"/docs/tags/bios"}],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Build Coreboot","slug":"/coreboot/build/","tags":["coreboot","build","bios"]},"sidebar":"tutorialCoreboot","previous":{"title":"Requirements","permalink":"/docs/coreboot/requirements/"},"next":{"title":"Downgrading BIOS","permalink":"/docs/coreboot/downgrading-bios/"}}');var r=n(4848),s=n(8453);const t={sidebar_position:3,title:"Build Coreboot",slug:"/coreboot/build/",tags:["coreboot","build","bios"]},l="Build Coreboot",a={},c=[{value:"Step 1: Install tools and libraries needed for coreboot",id:"step-1-install-tools-and-libraries-needed-for-coreboot",level:2},{value:"Step 2: Download Coreboot Source Tree",id:"step-2-download-coreboot-source-tree",level:2},{value:"Step 3: Build the Coreboot Toolchain",id:"step-3-build-the-coreboot-toolchain",level:2},{value:"Step 4: Configure the Build",id:"step-4-configure-the-build",level:2},{value:"Motherboard",id:"motherboard",level:3},{value:"Payload",id:"payload",level:3},{value:"SeaBIOS",id:"seabios",level:4},{value:"GRUB2",id:"grub2",level:4},{value:"(Optional) Save your configuration to a file:",id:"optional-save-your-configuration-to-a-file",level:4},{value:"Step 5: Build Coreboot",id:"step-5-build-coreboot",level:2}];function d(e){const o={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:n}=o;return n||function(e,o){throw new Error("Expected "+(o?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.header,{children:(0,r.jsx)(o.h1,{id:"build-coreboot",children:"Build Coreboot"})}),"\n",(0,r.jsx)(o.p,{children:"Now we will walk through building Coreboot from scratch. We will first install the required tools, then download Coreboot\u2019s source code, build its toolchain, configure it for your mainboard, and finally compile it into a ROM file you can flash."}),"\n",(0,r.jsx)(o.h2,{id:"step-1-install-tools-and-libraries-needed-for-coreboot",children:"Step 1: Install tools and libraries needed for coreboot"}),"\n",(0,r.jsx)(o.p,{children:"Coreboot needs several development tools and libraries to compile successfully.\nThe packages you need depend on your Linux distribution. Run the command that matches your system:"}),"\n",(0,r.jsx)(o.p,{children:"Debian-based distros (e.g., Ubuntu, Linux Mint):"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"sudo apt install -y python-is-python3 bison build-essential curl flex git gnat libncurses-dev libssl-dev zlib1g-dev pkgconf\n"})}),"\n",(0,r.jsx)(o.p,{children:"Arch-based distros (e.g., Manjaro, EndeavourOS):"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"sudo pacman -S base-devel curl git gcc-ada ncurses zlib\n"})}),"\n",(0,r.jsx)(o.p,{children:"Red Hat-based distros (e.g., Fedora, CentOS, RHEL):"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"sudo dnf install git make gcc-gnat flex bison xz bzip2 gcc g++ ncurses-devel wget zlib-devel patch\n"})}),"\n",(0,r.jsx)(o.p,{children:"If any package is missing, Coreboot may fail to build, so make sure the installation finishes without errors."}),"\n",(0,r.jsx)(o.h2,{id:"step-2-download-coreboot-source-tree",children:"Step 2: Download Coreboot Source Tree"}),"\n",(0,r.jsx)(o.p,{children:"We will now download Coreboot\u2019s source code from the official repository and move into its directory:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"git clone https://review.coreboot.org/coreboot\ncd coreboot\n"})}),"\n",(0,r.jsx)(o.p,{children:"This will give you the latest development version of Coreboot.\nIf you want to build a specific version, you can check out the corresponding branch or tag after cloning."}),"\n",(0,r.jsx)(o.h2,{id:"step-3-build-the-coreboot-toolchain",children:"Step 3: Build the Coreboot Toolchain"}),"\n",(0,r.jsx)(o.p,{children:"Coreboot uses its own toolchain to ensure that builds are reproducible and work on all supported boards.\nYou must build this toolchain before compiling Coreboot itself."}),"\n",(0,r.jsx)(o.p,{children:"First, see which toolchains are available:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"make help_toolchain\n"})}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"Output"}),(0,r.jsx)("p",{children:(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-text",children:'*** Toolchain targets ***\n  crossgcc        - Build coreboot cross-compilers for all platforms\n  crossgcc-clean  - Remove all built coreboot cross-compilers\n  iasl            - Build coreboot IASL compiler (built by all cross targets)\n  clang           - Build coreboot clang compiler\n  nasm            - Build coreboot nasm\n  test-toolchain  - Reports if toolchain components are out of date\n  crossgcc-ARCH   - Build cross-compiler for specific architecture\n  ARCH can be "i386", "x64", "arm", "aarch64", "riscv", "ppc64", "nds32le"\n  Use "make [target] CPUS=#" to build toolchain using multiple cores\n  Use "make [target] DEST=some/path" to install toolchain there\n  Use "make [target] BUILDGCC_OPTIONS="-m" to get packages from coreboot mirror"\n'})})})]}),"\n",(0,r.jsx)(o.p,{children:"Choose the one that matches your target architecture.\nFor most x86 systems, including laptops like the ThinkPad T430s, use the i386 toolchain."}),"\n",(0,r.jsx)(o.p,{children:"Examples:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"make crossgcc-i386 CPUS=$(nproc)       # build i386 toolchain\nmake crossgcc-aarch64 CPUS=$(nproc)    # build Aarch64 toolchain\nmake crossgcc-riscv CPUS=$(nproc)      # build RISC-V toolchain\n"})}),"\n",(0,r.jsx)(o.p,{children:(0,r.jsx)(o.strong,{children:"Important notes:"})}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"i386"})," toolchain works for all x86 and x86_64 boards."]}),"\n",(0,r.jsx)(o.li,{children:"You can try building with your system\u2019s compiler, but this often causes build errors. The Coreboot toolchain is strongly recommended."}),"\n"]}),"\n",(0,r.jsx)(o.h2,{id:"step-4-configure-the-build",children:"Step 4: Configure the Build"}),"\n",(0,r.jsx)(o.p,{children:"In this step, we configure Coreboot for your specific computer, in this example, the Lenovo ThinkPad T430s. Coreboot is highly modular, and the configuration determines how it initializes your hardware and what additional software (\u201cpayloads\u201d) it will run after startup."}),"\n",(0,r.jsx)(o.p,{children:"Run the interactive configuration menu:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"make menuconfig\n"})}),"\n",(0,r.jsx)(o.p,{children:"This menu lets you select various options such as the motherboard, ROM chip size, and payload."}),"\n",(0,r.jsx)(o.h3,{id:"motherboard",children:"Motherboard"}),"\n",(0,r.jsx)(o.p,{children:"Navigate in the menu:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-text",children:"Mainboard  ---\x3e  \n    Mainboard vendor (Lenovo)\n    Mainboard model (ThinkPad T430s)\n    ROM chip size (16384 KB (16 MB))\n< Exit >\n"})}),"\n",(0,r.jsx)(o.admonition,{type:"note",children:(0,r.jsx)(o.p,{children:"Make sure the ROM chip size matches your actual hardware. Using the wrong size may result in a non-working firmware."})}),"\n",(0,r.jsx)(o.h3,{id:"payload",children:"Payload"}),"\n",(0,r.jsx)(o.p,{children:"A payload in Coreboot is a small program that Coreboot loads after it finishes initializing the hardware. Common payloads include:"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"SeaBIOS"}),": provides a legacy BIOS environment to boot traditional operating systems."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"GRUB2"}),": a modern bootloader capable of booting Linux, Windows, and other systems, with more features than SeaBIOS."]}),"\n"]}),"\n",(0,r.jsx)(o.p,{children:"Next, select your preferred payload."}),"\n",(0,r.jsx)(o.h4,{id:"seabios",children:"SeaBIOS"}),"\n",(0,r.jsx)(o.p,{children:"SeaBIOS provides a traditional BIOS interface, making it a simple choice for booting legacy operating systems or when you want a classic BIOS like experience."}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-text",children:"Payload  ---\x3e\n    Payload to add (SeaBIOS)\n    SeaBIOS version (1.16.3)\n< Exit >\n< Exit >\n< Yes >\n"})}),"\n",(0,r.jsx)(o.h4,{id:"grub2",children:"GRUB2"}),"\n",(0,r.jsx)(o.p,{children:"GRUB2 is a modern, flexible bootloader that can boot Linux, Windows, and other systems. It is more powerful than SeaBIOS but requires some extra configuration."}),"\n",(0,r.jsx)(o.p,{children:"Install the required dependencies for building the GRUB2 payload:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"sudo apt install automake autoconf autopoint libfreetype6-dev unifont fonts-unifont unifont-bin gawk\n"})}),"\n",(0,r.jsx)(o.p,{children:"In the configuration menu:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-text",children:"Payload  ---\x3e\n     Payload to add (GRUB2)\n     GRUB version (2.12)\n     Extra modules to include in GRUB image (NEW)\n  [*]Include GRUB2 runtime config file into ROM image (NEW)\n< Exit >\n< Exit >\n< Yes >\n"})}),"\n",(0,r.jsx)(o.p,{children:"Add GRUB2 Extra Modules."}),"\n",(0,r.jsx)(o.p,{children:"Modules extend GRUB\u2019s capabilities, for example supporting USB, LVM, encryption, or different filesystems. For a typical laptop, include:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-text",children:"cryptodisk nativedisk ehci ohci usb usbms usbserial_pl2303 usbserial_ftdi usbserial_usbdebug jpeg all_video hashsum regexp linux part_msdos part_gpt lvm luks gcry_md5 gcry_sha1 gcry_sha256 gcry_sha512 gcry_rsa gcry_rijndael gcry_des search search_fs_file search_fs_uuid configfile probe\n"})}),"\n",(0,r.jsx)(o.p,{children:"These modules ensure that GRUB can boot from internal disks, USB sticks, handle encrypted drives, and support multiple filesystems."}),"\n",(0,r.jsxs)(o.p,{children:["Create a basic ",(0,r.jsx)(o.code,{children:"grub.cfg"})," to define the boot behavior and include it in the \u201cInclude GRUB2 runtime config file into ROM image\u201d option."]}),"\n",(0,r.jsxs)(n,{children:[(0,r.jsx)("summary",{children:"grub.cfg"}),(0,r.jsx)("p",{children:(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-text",children:'# Coreboot GRUB2: auto-boot with ESC menu and user instructions\n\nset timeout=2\nset timeout_style=hidden\nset default=0\n\n# Show instructions\necho "Press ESC to access the boot menu."\necho "Otherwise, the system will boot from the hard drive automatically."\n\n### Primary entry: Boot internal disk ###\nmenuentry "Boot first disk" {\n    echo "Booting from the hard drive..."\n    search --no-floppy --set=root --file /grub/grub.cfg\n    configfile /grub/grub.cfg\n}\n\n### Secondary entry: Boot from USB via ESC ###\nmenuentry "Boot USB" {\n    search --no-floppy --removable --file /boot/grub/grub.cfg --set=root\n    configfile /grub/grub.cfg\n}\n'})})})]}),"\n",(0,r.jsx)(o.h4,{id:"optional-save-your-configuration-to-a-file",children:"(Optional) Save your configuration to a file:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"make savedefconfig\ncat defconfig\n"})}),"\n",(0,r.jsx)(o.p,{children:"For SeaBIOS, your configuration might include:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-text",children:"CONFIG_VENDOR_LENOVO=y\nCONFIG_BOARD_LENOVO_T430S=y\n"})}),"\n",(0,r.jsx)(o.p,{children:"For GRUB2, it might look like:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-text",children:'CONFIG_VENDOR_LENOVO=y\nCONFIG_BOARD_LENOVO_T430S=y\nCONFIG_PAYLOAD_GRUB2=y\nCONFIG_GRUB2_EXTRA_MODULES="cryptodisk nativedisk ehci ohci usb usbms usbserial_pl2303 usbserial_ftdi usbserial_usbdebug jpeg all_video hashsum regexp linux part_msdos part_gpt lvm luks gcry_md5 gcry_sha1 gcry_sha256 gcry_sha512 gcry_rsa gcry_rijndael gcry_des search search_fs_file search_fs_uuid configfile probe"\nCONFIG_GRUB2_INCLUDE_RUNTIME_CONFIG_FILE=y\n'})}),"\n",(0,r.jsx)(o.admonition,{type:"note",children:(0,r.jsx)(o.p,{children:"This may vary depending on your Coreboot source version. Do not worry if there are more or fewer lines."})}),"\n",(0,r.jsx)(o.h2,{id:"step-5-build-coreboot",children:"Step 5: Build Coreboot"}),"\n",(0,r.jsx)(o.p,{children:"With everything set up, you can now build Coreboot:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"make\n"})}),"\n",(0,r.jsx)(o.p,{children:"If the build completes successfully, you will see a message like:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-text",children:"Built lenovo/t430s (ThinkPad T430s)\n"})}),"\n",(0,r.jsxs)(o.p,{children:["The compiled ROM file will be located at ",(0,r.jsx)(o.code,{children:"build/coreboot.rom"}),"."]}),"\n",(0,r.jsx)(o.p,{children:"If you want to start fresh and remove all compiled files, run:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-bash",children:"make distclean\n"})}),"\n",(0,r.jsx)(o.p,{children:"This will reset the build environment so you can reconfigure and rebuild from scratch."}),"\n",(0,r.jsx)(o.p,{children:"You now have a Coreboot ROM ready to flash to your device!"})]})}function h(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>t,x:()=>l});var i=n(6540);const r={},s=i.createContext(r);function t(e){const o=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(s.Provider,{value:o},e.children)}}}]);