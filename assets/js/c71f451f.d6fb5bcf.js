"use strict";(self.webpackChunkmy_personal_website=self.webpackChunkmy_personal_website||[]).push([[5500],{1114:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"coreboot/external-flashing","title":"External Flashing","description":"If something goes wrong during internal flashing, the only way to restore the stock BIOS (or flash a new image) is by using an external programmer. In fact, for most motherboards, external flashing is the only available method unless the board specifically supports internal flashing.","source":"@site/docs/coreboot/external-flashing.mdx","sourceDirName":"coreboot","slug":"/coreboot/external-flashing/","permalink":"/docs/coreboot/external-flashing/","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"coreboot","permalink":"/docs/tags/coreboot"},{"inline":true,"label":"chipsec","permalink":"/docs/tags/chipsec"},{"inline":true,"label":"bios","permalink":"/docs/tags/bios"},{"inline":true,"label":"external","permalink":"/docs/tags/external"},{"inline":true,"label":"flashing","permalink":"/docs/tags/flashing"}],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"title":"External Flashing","slug":"/coreboot/external-flashing/","tags":["coreboot","chipsec","bios","external","flashing"]},"sidebar":"tutorialCoreboot","previous":{"title":"Internal Flashing","permalink":"/docs/coreboot/internal-flashing/"}}');var o=s(4848),r=s(8453),a=s(1662);const i={sidebar_position:7,title:"External Flashing",slug:"/coreboot/external-flashing/",tags:["coreboot","chipsec","bios","external","flashing"]},l="External Flashing",c={},h=[{value:"Detect the Chip",id:"detect-the-chip",level:2},{value:"Backup the Factory Bios",id:"backup-the-factory-bios",level:2},{value:"Flash the Coreboot BIOS",id:"flash-the-coreboot-bios",level:2},{value:"Verify the Flashed Image",id:"verify-the-flashed-image",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"external-flashing",children:"External Flashing"})}),"\n",(0,o.jsx)(n.p,{children:"If something goes wrong during internal flashing, the only way to restore the stock BIOS (or flash a new image) is by using an external programmer. In fact, for most motherboards, external flashing is the only available method unless the board specifically supports internal flashing."}),"\n",(0,o.jsx)(n.h2,{id:"detect-the-chip",children:"Detect the Chip"}),"\n",(0,o.jsx)(n.p,{children:"Now, you need to detect the chip model using flashrom. To ensure accurate detection, follow these steps for the BIOS chip:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Based on your BIOS Chip type (",(0,o.jsx)(n.code,{children:"SOIC"})," or ",(0,o.jsx)(n.code,{children:"WSON"}),") Connect the Raspberry Pico to your Pomona Clip (1st photo) or Pogo Pin Adapter (2nd photo) using Dupont cables, as showed in Libreboot guide."]}),"\n",(0,o.jsx)(n.li,{children:"Plug/Insert onto the BIOS chip firmly"}),"\n",(0,o.jsx)(n.li,{children:"Plug the Raspberry Pico into the laptop using a USB cable"}),"\n"]}),"\n","\n",(0,o.jsxs)(a.Ay,{container:!0,spacing:2,children:[(0,o.jsx)(a.Ay,{item:!0,xs:12,sm:6,md:6,style:{textAlign:"center"},children:(0,o.jsx)("img",{src:"/img/libreboot/connection.jpg",alt:"Connection Setup",style:{width:"100%",maxWidth:"100%"}})}),(0,o.jsx)(a.Ay,{item:!0,xs:12,sm:6,md:6,style:{textAlign:"center"},children:(0,o.jsx)("img",{src:"/img/coreboot/connection.jpg",alt:"Connection Clip",style:{width:"100%",maxWidth:"100%"}})})]}),"\n",(0,o.jsx)(n.p,{children:"Execute the following command to detect the chip"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"sudo flashrom -p serprog:dev=/dev/ttyACM0,spispeed=16M\n"})}),"\n",(0,o.jsx)(n.p,{children:"If multiple chips are detected, verify whether the one you previously photographed or one closely resembling it is present. Subsequently, re-run the command, making sure to specify the name of the pertinent chip."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'sudo flashprog -p serprog:dev=/dev/ttyACM0,spispeed=16M -c "W25Q128.V"\n'})}),"\n",(0,o.jsx)(n.p,{children:"If the Raspberry Pico detects the chip, you may proceed by creating a backup."}),"\n",(0,o.jsx)(n.h2,{id:"backup-the-factory-bios",children:"Backup the Factory Bios"}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"If you are coming from a unsuccessful internal flashing, you can skip this part as there is no point to dump a bios that does not work."})}),"\n",(0,o.jsx)(n.p,{children:"To create a reliable backup of the BIOS chip(s), it's advisable to perform a triple dump of them"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'sudo flashrom -p serprog:dev=/dev/ttyACM0,spispeed=16M -c "W25Q128.V" -r factory.bin\nsudo flashrom -p serprog:dev=/dev/ttyACM0,spispeed=16M -c "W25Q128.V" -r factory2.bin\nsudo flashrom -p serprog:dev=/dev/ttyACM0,spispeed=16M -c "W25Q128.V" -r factory3.bin\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Next, use ",(0,o.jsx)(n.code,{children:"sha1sum"})," to compare the dumped BIOS images"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"sha1sum factory.bin factory.bin factory.bin\n"})}),"\n",(0,o.jsx)(n.p,{children:"If the hashes match, you should see something like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"6cf9bfc90df1ed01336872cd159a00c101d0a7b0  factory.bin\n6cf9bfc90df1ed01336872cd159a00c101d0a7b0  factory2.bin\n6cf9bfc90df1ed01336872cd159a00c101d0a7b0  factory3.bin\n"})}),"\n",(0,o.jsx)(n.p,{children:"Once you've confirmed that the hashes are the same, you can clean up any temporary dump files:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"rm -fr factory2.bin factory3.bin\n"})}),"\n",(0,o.jsx)(n.h2,{id:"flash-the-coreboot-bios",children:"Flash the Coreboot BIOS"}),"\n",(0,o.jsx)(n.p,{children:"Once everything looks correct:"}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Before writing the BIOS into the chip(s), ensure to remove the CMOS battery as a security precaution."})}),"\n",(0,o.jsx)(n.p,{children:"Make sure the writing protection is disabled:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'sudo flashrom -p serprog:dev=/dev/ttyACM0,spispeed=16M -c "W25Q128.V" --wp-disable\n'})}),"\n",(0,o.jsx)(n.p,{children:"You will get the below output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"Disabled hardware protection\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Flash the prepared ",(0,o.jsx)(n.code,{children:"coreboot.rom"})," image:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'sudo flashrom -p serprog:dev=/dev/ttyACM0,spispeed=16M -c "W25Q128.V" -w coreboot.rom --ifd -i bios -N\n'})}),"\n",(0,o.jsx)(n.p,{children:"You should likely get these logs:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:'Using region: "bios"\nReading ich decriptor... done.\nErasing and writing flash chip... Erase/write done.\nVerifying flash... VERIFIED.\n'})}),"\n",(0,o.jsx)(n.h2,{id:"verify-the-flashed-image",children:"Verify the Flashed Image"}),"\n",(0,o.jsxs)(n.p,{children:["After flashing, always re-read the chip and compare it against the file you wrote (",(0,o.jsx)(n.code,{children:"coreboot.rom"}),").\nThis ensures the flash was successful and the chip contains exactly what you intended."]}),"\n",(0,o.jsx)(n.p,{children:"To double-check, you can dump the newly flashed BIOS image"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'sudo flashrom -p serprog:dev=/dev/ttyACM0,spispeed=16M -c "W25Q128.V" -r flashed.bin\n'})}),"\n",(0,o.jsx)(n.p,{children:"Next, use sha1sum to compare the dumped BIOS image with the original libreboot_top.rom file"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"sha1sum coreboot.rom flashed.bin\n"})}),"\n",(0,o.jsx)(n.p,{children:"If the hashes match, you should see something like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"42489cdfda9666177cd9abc1876f4dea258f7ab8  coreboot.rom\n42489cdfda9666177cd9abc1876f4dea258f7ab8  flashed.bin\n"})}),"\n",(0,o.jsx)(n.p,{children:"Once you've confirmed that the hashes are the same, you can clean up any temporary dump files:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"rm -fr flashed.bin\n"})}),"\n",(0,o.jsx)(n.p,{children:"Your new Coreboot firmware has been flashed correctly and is ready to boot!"})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var t=s(6540);const o={},r=t.createContext(o);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);