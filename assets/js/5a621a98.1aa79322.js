"use strict";(self.webpackChunkmy_personal_website=self.webpackChunkmy_personal_website||[]).push([[1336],{7008:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"coreboot/flashing","title":"Flashing","description":"Flashing firmware always carries some risk.","source":"@site/docs/coreboot/flashing.md","sourceDirName":"coreboot","slug":"/coreboot/flashing/","permalink":"/docs/coreboot/flashing/","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"coreboot","permalink":"/docs/tags/coreboot"},{"inline":true,"label":"chipsec","permalink":"/docs/tags/chipsec"},{"inline":true,"label":"bios","permalink":"/docs/tags/bios"},{"inline":true,"label":"flashing","permalink":"/docs/tags/flashing"}],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Flashing","slug":"/coreboot/flashing/","tags":["coreboot","chipsec","bios","flashing"]},"sidebar":"tutorialCoreboot","previous":{"title":"Unlocking BIOS","permalink":"/docs/coreboot/unlocking-bios/"}}');var i=o(4848),r=o(8453);const a={sidebar_position:6,title:"Flashing",slug:"/coreboot/flashing/",tags:["coreboot","chipsec","bios","flashing"]},t="Flashing",l={},c=[{value:"Install Flashing Tools",id:"install-flashing-tools",level:3},{value:"Back Up Your Existing BIOS Region",id:"back-up-your-existing-bios-region",level:3},{value:"Flash the Coreboot BIOS",id:"flash-the-coreboot-bios",level:3},{value:"Verify the Flashed Image",id:"verify-the-flashed-image",level:3},{value:"Quick Byte-for-Byte Comparison",id:"quick-byte-for-byte-comparison",level:3},{value:"Compare Build Information Inside CBFS",id:"compare-build-information-inside-cbfs",level:3},{value:"Check CBFS Contents",id:"check-cbfs-contents",level:3},{value:"Conclusion",id:"conclusion",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"flashing",children:"Flashing"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"Flashing firmware always carries some risk.\nIf something goes wrong, your device might not boot until you reflash it using an external programmer.\nAlways back up your current BIOS before writing Coreboot."})}),"\n",(0,i.jsx)(n.h3,{id:"install-flashing-tools",children:"Install Flashing Tools"}),"\n",(0,i.jsx)(n.p,{children:"We will use the flashrom utility to read and write the BIOS chip, and cbfstool to inspect Coreboot images."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo apt install flashrom coreboot-utils\n"})}),"\n",(0,i.jsx)(n.h3,{id:"back-up-your-existing-bios-region",children:"Back Up Your Existing BIOS Region"}),"\n",(0,i.jsx)(n.p,{children:"Before doing anything else, make a full backup of your current BIOS.\nThis is your recovery point if you need to restore the original firmware."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo flashrom -p internal -r factory.rom --ifd -i bios\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"This does not back up the entire firmware, only the BIOS region. The Intel Management Engine and descriptor regions are excluded, so this is not a full recovery image."})}),"\n",(0,i.jsx)(n.h3,{id:"flash-the-coreboot-bios",children:"Flash the Coreboot BIOS"}),"\n",(0,i.jsx)(n.p,{children:"Once everything looks correct, flash the prepared Coreboot BIOS region:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo flashrom -p internal -w coreboot.rom --ifd -i bios -N\n"})}),"\n",(0,i.jsx)(n.h3,{id:"verify-the-flashed-image",children:"Verify the Flashed Image"}),"\n",(0,i.jsx)(n.p,{children:"After flashing, always re-read the chip and compare it against the file you wrote.\nThis ensures the flash was successful and the chip contains exactly what you intended."}),"\n",(0,i.jsx)(n.p,{children:"Read back the flashed chip:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo flashrom -p internal -r flashed.rom --ifd -i bios\n"})}),"\n",(0,i.jsx)(n.p,{children:"Your compiled coreboot.rom contains more than just the BIOS region, so we must extract only the BIOS part to match the layout of the original firmware."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"dd if=coreboot.rom of=coreboot_bios.rom bs=1 skip=5242880 count=11534336\ndd if=flashed.rom of=flashed_bios.rom bs=1 skip=5242880 count=11534336\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"skip=5242880 skips the first 5 MB (non-BIOS regions such as Intel ME)."}),"\n",(0,i.jsx)(n.li,{children:"count=11534336 copies the remaining 11 MB, which is the BIOS region."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"quick-byte-for-byte-comparison",children:"Quick Byte-for-Byte Comparison"}),"\n",(0,i.jsx)(n.p,{children:"Check that the flashed BIOS region matches the extracted BIOS region:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cmp -l coreboot_bios.rom flashed_bios.rom | head -n 20\n"})}),"\n",(0,i.jsx)(n.p,{children:"If no differences appear, the BIOS region was flashed correctly."}),"\n",(0,i.jsx)(n.h3,{id:"compare-build-information-inside-cbfs",children:"Compare Build Information Inside CBFS"}),"\n",(0,i.jsxs)(n.p,{children:["Extract the ",(0,i.jsx)(n.code,{children:"build_info"})," file from each full rom image:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cbfstool coreboot.rom extract -n build_info -f build_info_expected.rom\ncbfstool flashed.rom extract -n build_info -f build_info_actual.rom\n"})}),"\n",(0,i.jsx)(n.p,{children:"Compare them:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"diff -u build_info_expected.rom build_info_actual.rom\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If the output is empty, the ",(0,i.jsx)(n.code,{children:"build_info"})," files match."]}),"\n",(0,i.jsx)(n.h3,{id:"check-cbfs-contents",children:"Check CBFS Contents"}),"\n",(0,i.jsx)(n.p,{children:"Print the CBFS layout of the Coreboot BIOS:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cbfstool coreboot.rom print\n"})}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:"Output"}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"FMAP REGION: COREBOOT\nName                           Offset     Type           Size   Comp\ncbfs_master_header             0x0        cbfs header        32 none\ncpu_microcode_blob.bin         0x80       microcode       26624 none\nfallback/romstage              0x68c0     stage           92312 none\nfallback/ramstage              0x1d1c0    stage          120593 LZMA (255636 decompressed)\nconfig                         0x3a940    raw              3332 LZMA (10602 decompressed)\nrevision                       0x3b680    raw               774 none\nbuild_info                     0x3b9c0    raw               105 none\nfallback/dsdt.aml              0x3ba80    raw             14537 none\nvbt.bin                        0x3f380    raw              1409 LZMA (4459 decompressed)\ncmos_layout.bin                0x3f940    cmos_layout      2060 none\nfallback/postcar               0x40180    stage           23488 none\nfallback/payload               0x45dc0    simple elf     473556 none\n(empty)                        0xb97c0    null           202212 none\nbootblock                      0xeadc0    bootblock       20480 none\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"Print the CBFS layout of the Flashed BIOS:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cbfstool flashed.rom print\n"})}),"\n",(0,i.jsxs)(o,{children:[(0,i.jsx)("summary",{children:"Output"}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"FMAP REGION: COREBOOT\nName                           Offset     Type           Size   Comp\ncbfs_master_header             0x0        cbfs header        32 none\ncpu_microcode_blob.bin         0x80       microcode       26624 none\nfallback/romstage              0x68c0     stage           92312 none\nfallback/ramstage              0x1d1c0    stage          120593 LZMA (255636 decompressed)\nconfig                         0x3a940    raw              3332 LZMA (10602 decompressed)\nrevision                       0x3b680    raw               774 none\nbuild_info                     0x3b9c0    raw               105 none\nfallback/dsdt.aml              0x3ba80    raw             14537 none\nvbt.bin                        0x3f380    raw              1409 LZMA (4459 decompressed)\ncmos_layout.bin                0x3f940    cmos_layout      2060 none\nfallback/postcar               0x40180    stage           23488 none\nfallback/payload               0x45dc0    simple elf     473556 none\n(empty)                        0xb97c0    null           202212 none\nbootblock                      0xeadc0    bootblock       20480 none\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"Compare it with the intended Coreboot image:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cbfstool coreboot.rom print > cbfs_expected.txt\ncbfstool flashed.rom print > cbfs_actual.txt\ndiff -u cbfs_expected.txt cbfs_actual.txt\n"})}),"\n",(0,i.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"If all comparisons match, your new Coreboot firmware has been flashed correctly and is ready to boot."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>t});var s=o(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);